{"ast":null,"code":"var _jsxFileName = \"D:\\\\reactapps\\\\test-app\\\\src\\\\component\\\\QuestionForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatGPT = () => {\n  _s();\n  const [reply, setReply] = useState('');\n  const sendMessage = async () => {\n    const prompt = 'Hello, ChatGPT!';\n    try {\n      const response = await axios.post('https://api.openai.com/v1/engines/davinci-codex/completions', {\n        prompt: prompt,\n        max_tokens: 50,\n        temperature: 0.7\n      }, {\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer YOUR_API_KEY`\n        }\n      });\n      const generatedReply = response.data.choices[0].text.trim();\n      setReply(generatedReply);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendMessage,\n      children: \"Send Message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: reply\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatGPT, \"LdLiNN7z1oY+O0hCcsAVIBuWYwU=\");\n_c = ChatGPT;\nexport default ChatGPT;\nvar _c;\n$RefreshReg$(_c, \"ChatGPT\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","ChatGPT","_s","reply","setReply","sendMessage","prompt","response","post","max_tokens","temperature","headers","generatedReply","data","choices","text","trim","error","console","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/reactapps/test-app/src/component/QuestionForm.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst ChatGPT = () => {\r\n  const [reply, setReply] = useState('');\r\n\r\n  const sendMessage = async () => {\r\n    const prompt = 'Hello, ChatGPT!';\r\n\r\n    try {\r\n      const response = await axios.post(\r\n        'https://api.openai.com/v1/engines/davinci-codex/completions',\r\n        {\r\n          prompt: prompt,\r\n          max_tokens: 50,\r\n          temperature: 0.7,\r\n        },\r\n        {\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer YOUR_API_KEY`,\r\n          },\r\n        }\r\n      );\r\n\r\n      const generatedReply = response.data.choices[0].text.trim();\r\n      setReply(generatedReply);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={sendMessage}>Send Message</button>\r\n      <p>{reply}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatGPT;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMQ,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,MAAMC,MAAM,GAAG,iBAAiB;IAEhC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,IAAI,CAC/B,6DAA6D,EAC7D;QACEF,MAAM,EAAEA,MAAM;QACdG,UAAU,EAAE,EAAE;QACdC,WAAW,EAAE;MACf,CAAC,EACD;QACEC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAG;QACpB;MACF,CACF,CAAC;MAED,MAAMC,cAAc,GAAGL,QAAQ,CAACM,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI,CAACC,IAAI,CAAC,CAAC;MAC3DZ,QAAQ,CAACQ,cAAc,CAAC;IAC1B,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACtB;EACF,CAAC;EAED,oBACEjB,OAAA;IAAAmB,QAAA,gBACEnB,OAAA;MAAQoB,OAAO,EAAEf,WAAY;MAAAc,QAAA,EAAC;IAAY;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACnDxB,OAAA;MAAAmB,QAAA,EAAIhB;IAAK;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACX,CAAC;AAEV,CAAC;AAACtB,EAAA,CAnCID,OAAO;AAAAwB,EAAA,GAAPxB,OAAO;AAqCb,eAAeA,OAAO;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}